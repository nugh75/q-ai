services:
  db:
    image: postgres:15-alpine
    container_name: questionnaire_db
    environment:
      POSTGRES_USER: ${DB_USER:-user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
      POSTGRES_DB: ${DB_NAME:-questionnaire_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${DB_PORT:-5433}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-user} -d ${DB_NAME:-questionnaire_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - questionnaire-net
    restart: unless-stopped

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: questionnaire_backend
    env_file:
      - .env
    environment:
      DATABASE_URL: postgresql://${DB_USER:-user}:${DB_PASSWORD:-password}@db:5432/${DB_NAME:-questionnaire_db}
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:5180,http://localhost:5173}
      CACHE_TTL: ${CACHE_TTL:-3600}
      RATE_LIMIT_PER_MINUTE: ${RATE_LIMIT_PER_MINUTE:-10}
    volumes:
      - ./backend:/app
      - ./dati:/app/dati
    ports:
      - "${BACKEND_PORT:-8118}:8000"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - questionnaire-net
    restart: unless-stopped
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: questionnaire_frontend
    env_file:
      - .env
    environment:
      VITE_API_URL: ${VITE_API_URL:-http://localhost:8118}
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "${FRONTEND_PORT:-5180}:5173"
    depends_on:
      - backend
    networks:
      - questionnaire-net
    restart: unless-stopped
    command: npm run dev -- --host

networks:
  questionnaire-net:
    driver: bridge

volumes:
  postgres_data:
